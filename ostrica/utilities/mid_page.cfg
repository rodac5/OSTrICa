ready: function() {
                window.cy = this;

                // giddy up...

                cy.elements().unselectify();
				
				var options = {
				  OSTRICA_VARS_IN_OSTRIVIZ

				  // Called on `layoutready`
				  ready               : function() {},

				  // Called on `layoutstop`
				  stop                : function() {},

				  // Whether to animate while running the layout
				  animate             : true,

				  // The layout animates only after this many milliseconds
				  // (prevents flashing on fast runs)
				  animationThreshold  : 250,

				  // Number of iterations between consecutive screen positions update
				  // (0 -> only updated on the end)
				  refresh             : 20,

				  // Whether to fit the network view after when done
				  fit                 : true,

				  // Padding on fit
				  padding             : 30,

				  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
				  boundingBox         : undefined,

				  // Extra spacing between components in non-compound graphs
				  componentSpacing    : 100,

				  // Node repulsion (non overlapping) multiplier
				  nodeRepulsion       : function( node ){ return 400000; },

				  // Node repulsion (overlapping) multiplier
				  nodeOverlap         : 10,

				  // Ideal edge (non nested) length
				  idealEdgeLength     : function( edge ){ return 10; },

				  // Divisor to compute edge forces
				  edgeElasticity      : function( edge ){ return 100; },

				  // Nesting factor (multiplier) to compute ideal edge length for nested edges
				  nestingFactor       : 5,

				  // Gravity force (constant)
				  gravity             : 80,

				  // Maximum number of iterations to perform
				  numIter             : 1000,

				  // Initial temperature (maximum node displacement)
				  initialTemp         : 200,

				  // Cooling factor (how the temperature is reduced between consecutive iterations
				  coolingFactor       : 0.95,

				  // Lower temperature threshold (below this point the layout will end)
				  minTemp             : 1.0,

				  // Whether to use threading to speed up the layout
				  useMultitasking     : true
				};

				cy.layout( options );

                cy.on('tap', 'node', function(e) {
                    var node = e.cyTarget;
                    var neighborhood = node.neighborhood().add(node);

                    cy.elements().addClass('faded');
                    neighborhood.removeClass('faded');
					
					if (node.data('color') == '#000099') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>DomainBigData</b>");
					} else if (node.data('color') == '#bf00ff') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>TCPIPUtils</b>");
					} else if (node.data('color') == '#009900') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>PyWhois</b>");
					} else if (node.data('color') == '#660066') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>DeepViz</b>");
					} else if (node.data('color') == '#ff8000') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>VirusTotal</b>");
					} else if (node.data('color') == '#666699') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>Original intelligence request</b>");
					} else if (node.data('color') == '#ff0000') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>Cymru</b>");
					} else if (node.data('color') == '#00ff00') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>WebSiteInformer</b>");
					} else if (node.data('color') == '#999966') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>SpyOnWeb</b>");
					} else if (node.data('color') == '#a00000') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>SafeBrowsing</b>");
					} else if (node.data('color') == '#ffe033') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>ThreatCrowd</b>");
					} else if (node.data('color') == '#66ccff') {
						$("#info").html("Selected intelligence<br/> belongs to: <b>ThreatMiner</b>");
					} else {
						$("#info").html("Not implemented yet.");
					}
					
                });

                cy.on('tap', function(e) {
                    if (e.cyTarget === cy) {
                        cy.elements().removeClass('faded');
                    }
                });
            }

        });
		
		
		var tappedBefore;
		var tappedTimeout;
		cy.on('tap', function(event) {
			  var tappedNow = event.cyTarget;
			  if (tappedTimeout && tappedBefore) {
				clearTimeout(tappedTimeout);
			  }
			  if(tappedBefore === tappedNow) {
				tappedNow.trigger('doubleTap');
				tappedBefore = null;
			  } else {
				tappedTimeout = setTimeout(function(){ tappedBefore = null; }, 300);
				tappedBefore = tappedNow;
			  }
		});
		
		cy.on('doubleTap', 'node', function(e){
			var connectedNodesSources = this.connectedEdges().sources();
			var original_node_connection_counter = 0;
			var	current_node = this;
			
			if (current_node.data('color') == '#666699') {
				var connectedNodesTargets = current_node.connectedEdges().targets();				
				
				for (var idx_target = 0; idx_target < connectedNodesTargets.length; idx_target++) {
					if (connectedNodesTargets[idx_target].data('color') != '#666699')
						checkNodeToDelete(connectedNodesTargets[idx_target]);
				}
				
			} else {
				if (connectedNodesSources.length > 1) {					
					for (var idx = 0; idx < connectedNodesSources.length; idx++) {						
						if (connectedNodesSources[idx].data('color') == '#666699')
							original_node_connection_counter++;					
						}
				
					if (original_node_connection_counter < 2)
						current_node.remove();
					else {
						if (dialogBoxYesNo(current_node.data('name')) == true) {
							current_node.remove();
						}
					}
				} else {
					current_node.remove();
				}
			}	
			
			  
		}); // on tap
		
		$('#filters').on('click', 'input', function(){
    		
			// TODO: update here for filters
			var domainbigdata_intelligence = $('#dbd_intel').is(':checked');
			var virustotal_intelligence = $('#vt_intel').is(':checked');
			var deepviz_intelligence = $('#dv_intel').is(':checked');
			var tcpiputils_intelligence = $('#tcpip_intel').is(':checked');
			var pywhois_intelligence = $('#pyw_intel').is(':checked');
			var cymru_intelligence = $('#cymru_intel').is(':checked');
			var websiteinformer_intelligence = $('#websiteinformer_intel').is(':checked');
			var spyonweb_intelligence = $('#sow_intel').is(':checked');
			var safebrowsing_intelligence = $('#sbg_intel').is(':checked');
			var threatcrowd_intelligence = $('#tc_intel').is(':checked');
			var threatminer_intelligence = $('#tm_intel').is(':checked');
			
			var domains_intelligence = $('#flt_domains').is(':checked');
			var associated_domains_intelligence = $('#flt_assoc_domains').is(':checked');
			var ip_intelligence = $('#flt_ip').is(':checked');
			var mutex_intelligence = $('#flt_mutex').is(':checked');
			var detected_domains_intelligence = $('#flt_detected_domains').is(':checked');
			var detected_files_intelligence = $('#flt_detected_files').is(':checked');
			
						
			
			cy.batch(function(){
			  
			  cy.nodes().forEach(function( n ){
				var type = n.data('color');
				var intel_label = n.data('label');
				
				n.css('visibility', 'visible');
				
				var filter = function(){
					n.css('visibility', 'hidden');          
				};
				
				if( type === '#000099' ){
				  
				  if( !domainbigdata_intelligence ){ filter(); }
				  
				} else if( type === '#ff8000' ){
				  
				  if( !virustotal_intelligence ){ filter(); }
				  
				} else if( type === '#660066' ){
				  
				  if( !deepviz_intelligence ){ filter(); }
				  
				} else if( type === '#bf00ff' ){
				  
				  if( !tcpiputils_intelligence ){ filter(); }
				  
				} else if( type === '#009900' ){
				  
				  if( !pywhois_intelligence ){ filter(); }
				  
				} else if( type === '#ff0000' ){
				  
				  if( !cymru_intelligence ){ filter(); }
				  
				} else if( type === '#00ff00' ){
				  
				  if( !websiteinformer_intelligence ){ filter(); }
				  
				} else if( type === '#999966' ){
				  
				  if( !spyonweb_intelligence ){ filter(); }
				  
				} else if( type === '#a00000' ){
				  
				  if( !safebrowsing_intelligence ){ filter(); }
				  
				} else if( type === '#ffe033' ){
				  
				  if( !threatcrowd_intelligence ){ filter(); }
				  
				} else if( type === '#66ccff' ){
				  
				  if( !threatminer_intelligence ){ filter(); }
				  
				}
				
				if( intel_label == 'domain' ){
				  if( !domains_intelligence ){ filter(); }				  
				} else if( intel_label == 'associated domain' ){
				  if( !associated_domains_intelligence ){ filter(); }				  
				} else if( intel_label == 'ip' ){
				  if( !ip_intelligence ){ filter(); }				  
				} else if( intel_label == 'mutex' ){
				  if( !mutex_intelligence ){ filter(); }				  
				} else if( intel_label == 'detected_domain' ){
				  if( !detected_domains_intelligence ){ filter(); }				  
				} else if( intel_label == 'detection' ){
				  if( !detected_files_intelligence ){ filter(); }				  
				}			
				
				
			  });
			  
			});
    
		});
		
		var infoTemplate = Handlebars.compile([
			'<p style="margin-top:-10px;background-color:black;color:white;margin-left:30px;padding-bottom:10px;padding-top:10px;padding-right:175px;cursor:pointer;">{{name}}</p>'
		].join(''));
		
		$('#search').typeahead({
			minLength: 2,
			highlight: true,
		  },
		  {
			name: 'search-dataset',
			source: function( query, cb ){
			  function matches( str, q ){				
				str = (str || '').toLowerCase();
				q = (q || '').toLowerCase();				
				//console.log(str.match( q ));
				return str.match( q );
			  }
			  
			  var fields = ['name', 'label'];
			  
			  function anyFieldMatches( n ){				
				for( var i = 0; i < fields.length; i++ ){
				  var f = fields[i];				  
				  if( matches( n.data(f), query ) ){
					return true;
				  }
				}
				
				return false;
			  }
			  
			  function getData(n){
				var data = n.data();
				return data;
			  }
			  			  
			  var res = cy.nodes().stdFilter( anyFieldMatches ).map( getData );
			  cb( res );
			},
			templates: {
			  suggestion: infoTemplate
			}
		  }).on('typeahead:selected', function(e, entry, dataset){
			
			var n = cy.getElementById(entry.id);
			
			console.log('Selection is: ' + n.data('name'));
			console.log('Selection is: ' + entry.id);
			showNodeInfo( n );
			// DELETE WORKING
			// n.remove();	
			
			// SELECT ONLY NODE WORKING
			//n.selectify(); 
			//n.select();
			
			// SELECT NODES AND RELATIONS WORKING
			var selected_node = n;
            var neighborhood = selected_node.neighborhood().add(selected_node);
            cy.elements().addClass('faded');
            neighborhood.removeClass('faded');
			
		  }); // end Search
		  
			function showNodeInfo( node ){
				var node_type;
				if (node.data('color') == '#000099') {
					node_type = 'DomainBigData';
				} else if (node.data('color') == '#bf00ff') {
					node_type = 'TCPIPUtils';
				} else if (node.data('color') == '#009900') {
					node_type = 'PyWhois';
				} else if (node.data('color') == '#660066') {
					node_type = 'DeepViz';
				} else if (node.data('color') == '#ff8000') {
					node_type = 'VirusTotal';
				} else if (node.data('color') == '#666699') {
					node_type = 'Original intelligence request';
				} else if (node.data('color') == '#a00000') {
					node_type = 'SafeBrowsing (Google)';
				} else if (node.data('color') == '#999966') {
					node_type = 'SpyOnWeb';
				} else if (node.data('color') == '#00ff00') {
					node_type = 'WebSiteInformer';
				} else if (node.data('color') == '#ff0000') {
					node_type = 'Cymru';
				} else if (node.data('color') == '#ffe033') {
					node_type = 'ThreatCrowd';
				} else if (node.data('color') == '#66ccff') {
					node_type = 'ThreatMiner';
				} else {
					node_type = 'Not implemented yet.';
				}	
				
				
				$('#info').html( 'Node type is <b>'+ node_type +'</b><br/>Name: <b>' + node.data('name') + '</b><br/>Information: <b>' + node.data('label') + '</b>' ).show();
			}

    }); // on dom ready
	
function selectNodeByInfoClick( node ){
	var n = cy.getElementById(node);
	var selected_node = n;
    var neighborhood = selected_node.neighborhood().add(selected_node);
    cy.elements().addClass('faded');
    neighborhood.removeClass('faded');
	$('html, body').animate({ scrollTop: 0 }, 'slow');
}
	
function checkNodeToDelete(node){
	var connectedNodesSources = node.connectedEdges().sources();
	var node_linked_to_original_intel = 0;
	var can_be_removed = true;
	
	for (var idx = 0; idx < connectedNodesSources.length; idx++) {						
		if (connectedNodesSources[idx].data('color') == '#666699')
			node_linked_to_original_intel++;
		else {
			var connectedTargets = connectedNodesSources[idx].connectedEdges().targets();
			if (connectedTargets.length > 2) {
				can_be_removed = false;
			}
		}
		
	}
	
	if ( (node_linked_to_original_intel < 2) & (can_be_removed == true) )
		node.remove();
	
}

function dialogBoxYesNo(node_value) {
    var dialog_msg = 'Node ' + node_value + ' is associated with multiple original intelligence.\n' +
					 'Do you want to remove it anyway?';
	
    if (confirm(dialog_msg) == true) {
        return true;
    }
	
	return false;
}
</script>

<script>
function hideNode(idx, node_id){
	show_idx = "#show_"+ idx;
	hide_idx = "#hide_"+ idx;
	
	$( show_idx ).css('display', 'block');
	$( hide_idx ).css('display', 'none');
	
	removedData = cy.remove(cy.getElementById(node_id));
}

</script>

<div id="cy" style="margin-top:60px;"></div>
<br/><br/>
<div style="margin-top:340px;">
<table>
	<tr>
	<td style="width:77%;">
	<strong style="margin-left:30px;">Legend</strong><br/><br/>
<ul class="legend">
	<li><span class="origin"></span> Original Intelligence</li>
    <li><span class="virustotal"></span> VirusTotal</li>
    <li><span class="domainbigdata"></span> DomainBigData</li>
    <li><span class="tcpiputils"></span> TCPIPutils</li>
    <li><span class="pywhois"></span> PyWhois</li>
    <li><span class="deepviz"></span> DeepViz</li>
	<li><span class="cymru"></span> Cymru</li>
	<li><span class="websiteinformer"></span> WebSiteInformer</li>
	<li><span class="spyonweb"></span> SpyOnWeb</li>
	<li><span class="safebrowsing"></span> SafeBrowsing (Google)</li>
	<li><span class="threatcrowd"></span> ThreatCrowd</li>
	<li><span class="threatminer"></span> ThreatMiner</li>
</ul>
	</td>
	<td>
	<strong style="margin-left:30px;">Search</strong><br/>
	<input type="text" class="form-control" id="search" autofocus placeholder="Search" style="margin-left:30px;width:300px">
	<br/>
	<br/>
    <div style="margin-left:30px;" id="info">
	</div>
	
	</td>
	</tr>
  </table>
  
  <br/><br/>
	<div id="filters">
	<table>
	<tr>
	<td>
	<strong style="margin-left:30px;">Filters</strong><br/><br/>
		<ul>
		<li><input id="vt_intel" type="checkbox" checked></input> VirusTotal</li>
		<li><input id="dbd_intel" type="checkbox" checked></input> DomainBigData</li>
		<li><input id="tcpip_intel" type="checkbox" checked></input> TCPIPutils</li>
		<li><input id="pyw_intel" type="checkbox" checked></input> PyWhois</li>
		<li><input id="dv_intel" type="checkbox" checked></input> DeepViz</li>
		<li><input id="cymru_intel" type="checkbox" checked></input> Cymru</li>
		<li><input id="websiteinformer_intel" type="checkbox" checked></input> WebSiteInformer</li>
		<li><input id="sow_intel" type="checkbox" checked></input> SpyOnWeb</li>
		<li><input id="sbg_intel" type="checkbox" checked></input> SafeBrowsing (Google)</li>
		<li><input id="tc_intel" type="checkbox" checked></input> ThreatCrowd</li>		
		<li><input id="tm_intel" type="checkbox" checked></input> ThreatMiner</li>	
		</ul>

	<br/>
	</td>
	<td>
	<strong style="margin-left:30px;">Additional Filters</strong><br/><br/>
		<ul>
		<li><input id="flt_domains" type="checkbox" checked></input> Domains</li>
		<li><input id="flt_assoc_domains" type="checkbox" checked></input> Associated Domains</li>
		<li><input id="flt_ip" type="checkbox" checked></input> IP</li>
		<li><input id="flt_mutex" type="checkbox" checked></input> Mutex</li>
		<li><input id="flt_detected_domains" type="checkbox" checked></input> Detected Domains</li>
		<li><input id="flt_detected_files" type="checkbox" checked></input> Files Detection</li>
		</ul>
	</td>
	</tr>
	</table>
	</div>
  <br/>
</div>